/*
* TestFigure : test automatique des figures geometriques en mode texte
*/
public class TestFigure {
	
	// attributs pour tests auto
	static	boolean resTest = true ;
	static	int nbTests = 0 ;
	static	int nbTestsOK = 0 ;
	static final int nbTestsMAX = 28 ;
		
		
	// methode d'affichage des resultats de test 
	// a utiliser a chaque etape
	static void affResTest(int numTest) {
		if (resTest) {
		    nbTestsOK ++ ;
		    System.out.println("Test "+numTest+" OK");
		}
		else
		    System.out.println("Test "+numTest+" NOK");
	}
		
	// methode d'affichage des resultats de test 
	// a utiliser a chaque etape OK
	static void affResTestOK(int numTest) {
		System.out.println("Test "+numTest+" OK");
	}
		
	// methode d'affichage des resultats de test 
	// a utiliser a chaque etape OK
	static void affResTestNOK(int numTest) {
		System.out.println("Test "+numTest+" NOK");
	}
		

	// tests pour Dessin
	// 16 tests sur 28 au total
	static void testDessin () {
		System.out.println("=============================================") ;
		System.out.println("==============  TEST DESSIN   ===============") ;
		System.out.println("=============================================") ;
		
		Dessin d = new Dessin(3,5) ;
		System.out.println(d.toString()) ;
		resTest = resTest && d.toString().equals(".....\n.....\n.....\n") ; 
		nbTests ++ ;
		affResTest(1) ;
			
		try {	
			d.setPoint(0,2,'A') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("..A..\n.....\n.....\n") ; 
			nbTests ++ ;
			affResTest(2) ;
			d.setPoint(0,0,'X') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("X.A..\n.....\n.....\n") ; 
			nbTests ++ ;
			affResTest(3) ;
			d.setPoint(2,4,'Y') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("X.A..\n.....\n....Y\n") ; 
			nbTests ++ ;
			affResTest(4) ;
			d.setPoint(-2,4,'Y') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("X.A..\n.....\n....Y\n") ; 
			nbTests ++ ;
			affResTest(5) ;
			d.setPoint(2,-4,'Y') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("X.A..\n.....\n....Y\n") ; 
			nbTests ++ ;
			affResTest(6) ;
			d.setPoint(3,4,'Y') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("X.A..\n.....\n....Y\n") ; 
			nbTests ++ ;
			affResTest(7) ;
			d.setPoint(2,5,'Y') ;
		  	System.out.println(d.toString()) ;
			resTest = resTest && d.toString().equals("X.A..\n.....\n....Y\n") ; 
			nbTests ++ ;
			affResTest(8) ;
			
			resTest = resTest && (d.getPoint(0,2) == 'A') ; 
			nbTests ++ ;
			affResTest(9) ;
			resTest = resTest && (d.getPoint(0,0) == 'X') ; 
			nbTests ++ ;
			affResTest(10) ;
			resTest = resTest && (d.getPoint(2,4) == 'Y') ; 
			nbTests ++ ;
			affResTest(11) ;
			resTest = resTest && (d.getPoint(1,3) == '.') ; 
			nbTests ++ ;
			affResTest(12) ;
		}
		catch (Exception e) {
			System.out.println("Tests 1 a 12 NOK");		
		}
		nbTests ++ ;
		try{
			d.getPoint(-2,4)  ; 
			affResTestNOK(13) ;
		}
		catch (IllegalArgumentException e) {
			System.out.println("mauvaises coordonnees : (-2,4) ");		
			nbTestsOK ++ ;			
			affResTestOK(13) ;
		}
		nbTests ++ ;
		try{
			d.getPoint(2,-4) ; 
			affResTestNOK(14) ;
		}
		catch (IllegalArgumentException e) {
			System.out.println("mauvaises coordonnees : (2,-4)  ");		
			nbTestsOK ++ ;			
			affResTestOK(14) ;
		}
		nbTests ++ ;
		try{
			d.getPoint(3,4) ; 
			affResTestNOK(15) ;
		}
		catch (IllegalArgumentException e) {
			System.out.println("mauvaises coordonnees : (3,4)  ");		
			nbTestsOK ++ ;			
			affResTestOK(15) ;
		}
		nbTests ++ ;
		try{
			d.getPoint(2,5) ; 
			affResTestNOK(16) ;
		}
		catch (IllegalArgumentException e) {
			System.out.println("mauvaises coordonnees : (2,5)  ");		
			nbTestsOK ++ ;			
			affResTestOK(16) ;
		}
		
	}	

	// tests pour la partie 1
	// 4 tests sur 28 au total
	static void test1 () {
		System.out.println("=============================================") ;
		System.out.println("============== TEST PARTIE 1  ===============") ;
		System.out.println("=============================================") ;
		
		
		try {
			Rectangle rec = new Rectangle(3,4, 0, 0,'#') ;
		  	System.out.println(rec.toString()) ;
			resTest = resTest && rec.toString().equals("####\n####\n####\n") ; 
			nbTests ++ ;
			affResTest(17) ;
	
			Carre car = new Carre(5,0,10,'@') ;
		  	System.out.println(car.toString()) ;
			resTest = resTest && car.toString().equals("@@@@@\n@@@@@\n@@@@@\n@@@@@\n@@@@@\n") ; 
			nbTests ++ ;
			affResTest(18) ;

			Triangle tri = new Triangle(7,5,30,'+') ;
			System.out.println(tri.toString()) ;
			resTest = resTest && tri.toString().equals("...+...\n..+++..\n.+++++.\n+++++++\n") ; 
			nbTests ++ ;
			affResTest(19) ;

			Triangle tri2 = new Triangle(10,10,30,'+') ;
			System.out.println(tri2.toString()) ;
			resTest = resTest && tri2.toString().equals(
			       "..........\n....++....\n...++++...\n..++++++..\n.++++++++.\n++++++++++\n") ; 
			nbTests ++ ;
			affResTest(20) ;
		}
		catch (Exception e) {
			System.out.println("Tests 17 a 20 NOK");		
		}
	}
	

	// tests pour la partie 2
	// 4 tests sur 28 au total
	static void test2 () {
		System.out.println("=============================================") ;
		System.out.println("============== TEST PARTIE 2  ===============") ;
		System.out.println("=============================================") ;

		try {
			Schema sch = new Schema(35,80) ;

			Rectangle rec = new Rectangle(3,4, 0, 0,'#') ;
			sch.ajout(rec) ;
			System.out.println("(0,0) Rectangle 3 sur 4") ; 
    			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####............................................................................\n"+
"####............................................................................\n"+
"####............................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n") ; 
			nbTests ++ ;
			affResTest(21) ;

			Carre car = new Carre(5,0,10,'@') ;
			sch.ajout(car) ;
			System.out.println("(0,0)=Rectangle 3 sur 4, (0,10)=Carre 5 sur 5") ; 
			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####......@@@@@.................................................................\n"+
"####......@@@@@.................................................................\n"+
"####......@@@@@.................................................................\n"+
"..........@@@@@.................................................................\n"+
"..........@@@@@.................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n") ; 
			nbTests ++ ;
			affResTest(22) ;

			Triangle tri = new Triangle(7,5,30,'+') ;
			sch.ajout(tri) ;
			System.out.println("(0,0)=Rectangle 3 sur 4, (0,10)=Carre 5 sur 5, (5,30)=Triangle de base 7") ; 
			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####......@@@@@.................................................................\n"+
"####......@@@@@.................................................................\n"+
"####......@@@@@.................................................................\n"+
"..........@@@@@.................................................................\n"+
"..........@@@@@.................................................................\n"+
".................................+..............................................\n"+
"................................+++.............................................\n"+
"...............................+++++............................................\n"+
"..............................+++++++...........................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n") ; 
			nbTests ++ ;
			affResTest(23) ;

			Triangle tri2 = new Triangle(10,10,30,'+') ;
			sch.ajout(tri2) ;
			System.out.println("(0,0)=Rectangle 3 sur 4, (0,10)=Carre 5 sur 5, (5,30)=Triangle de base 7, \n (10,30)=Triangle de base 10") ; 
			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####......@@@@@.................................................................\n"+
"####......@@@@@.................................................................\n"+
"####......@@@@@.................................................................\n"+
"..........@@@@@.................................................................\n"+
"..........@@@@@.................................................................\n"+
".................................+..............................................\n"+
"................................+++.............................................\n"+
"...............................+++++............................................\n"+
"..............................+++++++...........................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"..................................++............................................\n"+
".................................++++...........................................\n"+
"................................++++++..........................................\n"+
"...............................++++++++.........................................\n"+
"..............................++++++++++........................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n") ; 
			nbTests ++ ;
			affResTest(24) ;
		}
		catch (Exception e) {
			System.out.println("Tests 21 à 24 NOK");		
		}
	}
	

	// tests pour la partie 3 (tests aux limites)
	// 4 tests sur 28 au total
	static void test3 () {
		System.out.println("=============================================") ;
		System.out.println("============== TEST PARTIE 3  ===============") ;
		System.out.println("=============================================") ;

		try {
			Schema sch = new Schema(10,80) ;

			Rectangle rec = new Rectangle(3,4, -1, 0,'#') ;
			sch.ajout(rec) ;
			System.out.println("(-1,0) Rectangle 3 sur 4") ; 
    		System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####............................................................................\n"+
"####............................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n") ; 
			nbTests ++ ;
			affResTest(25) ;

			Carre car = new Carre(5,0,78,'@') ;
			sch.ajout(car) ;
			System.out.println("(-1,0)=Rectangle 3 sur 4, (0,78)=Carre 5 sur 5") ; 
			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####..........................................................................@@\n"+
"####..........................................................................@@\n"+
"..............................................................................@@\n"+
"..............................................................................@@\n"+
"..............................................................................@@\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n"+
"................................................................................\n") ; 
			nbTests ++ ;
			affResTest(26) ;

			Triangle tri = new Triangle(7,7,30,'+') ;
			sch.ajout(tri) ;
			System.out.println("(-1,0)=Rectangle 3 sur 4, (0,78)=Carre 5 sur 5, (7,30)=Triangle de base 7") ; 
			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####..........................................................................@@\n"+
"####..........................................................................@@\n"+
"..............................................................................@@\n"+
"..............................................................................@@\n"+
"..............................................................................@@\n"+
"................................................................................\n"+
"................................................................................\n"+
".................................+..............................................\n"+
"................................+++.............................................\n"+
"...............................+++++............................................\n") ; 
			nbTests ++ ;
			affResTest(27) ;

			Triangle tri2 = new Triangle(10,5,-2,'+') ;
			sch.ajout(tri2) ;
			System.out.println("(-1,0)=Rectangle 3 sur 4, (0,78)=Carre 5 sur 5, (7,30)=Triangle de base 7, \n (10,30)=Triangle de base 10") ; 
			System.out.println(sch) ;
			resTest = resTest && sch.toString().equals(
"####..........................................................................@@\n"+
"####..........................................................................@@\n"+
"..............................................................................@@\n"+
"..............................................................................@@\n"+
"..............................................................................@@\n"+
"................................................................................\n"+
"..++............................................................................\n"+
".++++............................+..............................................\n"+
"++++++..........................+++.............................................\n"+
"+++++++........................+++++............................................\n") ; 
			nbTests ++ ;
			affResTest(28) ;
		}
		catch (Exception e) {
			System.out.println("Tests 25 à 28 NOK");		
		}
	}
	
	public static void main (String args[]) {
		testDessin() ;
		test1 () ;
		test2 () ;
		test3 () ;
		
		System.out.println("\n\n\t FIN DES TESTS !!!! ");
		System.out.println("\n\t RESULTAT DES TESTS (Si tout est OK on doit avoir true) = "+resTest);
		System.out.println("\t NB TESTS OK (Si tout est OK on doit avoir 100%) = "+nbTestsOK * 100 / nbTests+"%");
		System.out.println("\n\t Et on doit avoir "+nbTestsMAX+" = "+nbTests);
	}
}

